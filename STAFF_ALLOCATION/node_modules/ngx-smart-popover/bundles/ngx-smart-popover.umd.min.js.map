{"version":3,"sources":["ng://ngx-smart-popover/lib/popover-content.component.ts","ng://ngx-smart-popover/lib/popover.directive.ts","ng://ngx-smart-popover/lib/popover.module.ts"],"names":["PopoverContentComponent","element","cdr","renderer","_this","this","placement","PopoverPlacement","Top","animation","closeOnClickOutside","closeOnMouseOutside","size","onCloseFromOutside","EventEmitter","top","left","isIn","displayType","opacity","transitionEnabled","windowWidth","window","innerWidth","windowHeight","innerHeight","onDocumentMouseDown","event","nativeElement","popover","contains","target","getElement","emit","undefined","prototype","ngAfterViewInit","listenClickFunc","listen","listenMouseFunc","listenTouchFunc","show","detectChanges","ngOnDestroy","updatePosition","p","positionElements","popoverDiv","hide","hideFromPopover","hostEl","targetEl","positionStr","appendToBody","positionStrParts","split","pos0","pos1","hostElPos","offset","position","targetElWidth","offsetWidth","targetElHeight","offsetHeight","effectivePlacement","getEffectivePlacement","targetElPos","shiftWidth","center","width","right","topOrBottomRight","topOrBottomLeft","shiftHeight","height","bottom","Right","Left","Bottom","TopLeft","TopRight","BottomLeft","BottomRight","nativeEl","offsetParentBCR","elBCR","offsetParentEl","parentOffsetEl","document","clientTop","scrollTop","clientLeft","scrollLeft","boundingClientRect","getBoundingClientRect","pageYOffset","documentElement","pageXOffset","getStyle","cssProp","currentStyle","getComputedStyle","isStaticPositioned","offsetParent","hostElement","targetElement","hostElBoundingRect","desiredPlacement","isTopOverflow","isRightOverflow","isLeftOverflow","isBottomOverflow","Component","args","selector","template","ElementRef","ChangeDetectorRef","Renderer2","Input","ViewChild","PopoverDirective","viewContainerRef","resolver","popoverContentComponent","popoverOnHover","popoverDismissTimeout","onShown","onHidden","showOrHideOnClick","evt","popoverDisabled","stopImmediatePropagation","toggle","showOrHideOnTouch","showOnHover","hideOnHover","popoverCloseOnMouseOutside","ngOnChanges","changes","currentValue","visible","content","factory","resolveComponentFactory","createComponent","popoverPlacement","popoverAnimation","popoverTitle","title","popoverCloseOnClickOutside","popoverSize","subscribe","setTimeout","destroy","Directive","exportAs","ViewContainerRef","ComponentFactoryResolver","Output","HostListener","type","PopoverModule","NgModule","declarations","imports","CommonModule","exports","entryComponents"],"mappings":"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","sourcesContent":["/**\n * This is a continuation of ngx-popover\n * @Reference {github} https://github.com/pleerock/ngx-popover\n */\n\nimport {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Renderer2,\n  ViewChild\n} from '@angular/core';\nimport { PopoverDirective, PopoverPlacement } from './popover.directive';\n\n@Component({\n  selector: 'popover-content',\n  template: `\n    <div #popoverDiv\n        class=\"bs-popover-{{ effectivePlacement }} popover-content popover {{ parentClass }}\"\n        [ngClass]=\"{\n            'sm': size === 'small',\n            'md-sm': size === 'medium-small',\n            'md': size === 'medium',\n            'lg': size === 'large'\n        }\"\n        [style.top.px]=\"top\"\n        [style.left.px]=\"left\"\n        [style.transition]=\"(transitionEnabled ? '0.15s opacity' : '')\"\n        [style.opacity]=\"opacity\"\n        [style.display]=\"'block'\"\n        [class.in]=\"isIn\"\n        role=\"popover\">\n            <div [hidden]=\"!closeOnMouseOutside\" class=\"virtual-area\"></div>\n            <div class=\"arrow\"></div>\n            <div class=\"popover-header\" [hidden]=\"!title\">{{ title }}</div>\n            <div class=\"popover-body\">\n                <ng-content></ng-content>\n                {{ content }}\n            </div>\n    </div>\n    `\n})\nexport class PopoverContentComponent implements AfterViewInit, OnDestroy {\n  // -------------------------------------------------------------------------\n  // Inputs / Outputs\n  // -------------------------------------------------------------------------\n  @Input() public content: string;\n  @Input() public placement: PopoverPlacement = PopoverPlacement.Top;\n  @Input() public title: string;\n  @Input() public parentClass: string;\n  @Input() public animation = true;\n  @Input() public closeOnClickOutside = false;\n  @Input() public closeOnMouseOutside = false;\n  @Input() public size: 'small' | 'medium-small' | 'medium' | 'large' | 'auto' = 'small';\n\n  // -------------------------------------------------------------------------\n  // Properties\n  // -------------------------------------------------------------------------\n  @ViewChild('popoverDiv') public popoverDiv: ElementRef;\n\n  public popover: PopoverDirective;\n  public onCloseFromOutside = new EventEmitter();\n  public top = -10000;\n  public left = -10000;\n  public isIn = false;\n  public displayType = 'none';\n  public effectivePlacement: string;\n  public opacity = 0;\n  public transitionEnabled = false;\n\n  public windowWidth = window.innerWidth;\n  public windowHeight = window.innerHeight;\n\n  public listenClickFunc: any;\n  public listenMouseFunc: any;\n  public listenTouchFunc: any;\n\n  // -------------------------------------------------------------------------\n  // Anonymous\n  // -------------------------------------------------------------------------\n\n  /**\n   * Closes dropdown if user clicks outside of this directive.\n   */\n  public onDocumentMouseDown = (event: any) => {\n      const element = this.element.nativeElement;\n      if (!element || !this.popover) {\n          return;\n      }\n      if (element.contains(event.target) || this.popover.getElement().contains(event.target)) {\n          return;\n      }\n      this.onCloseFromOutside.emit(undefined);\n  }\n\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n\n  constructor(protected element: ElementRef,\n              protected cdr: ChangeDetectorRef,\n              protected renderer: Renderer2) {\n  }\n\n  // -------------------------------------------------------------------------\n  // Lifecycle callbacks\n  // -------------------------------------------------------------------------\n\n  public ngAfterViewInit(): void {\n      if (this.closeOnClickOutside) {\n          this.listenClickFunc = this.renderer.listen('document', 'mousedown', (event: any) => this.onDocumentMouseDown(event));\n      }\n      if (this.closeOnMouseOutside) {\n          this.listenMouseFunc = this.renderer.listen('document', 'mouseover', (event: any) => this.onDocumentMouseDown(event));\n      }\n      // Always close on mobile touch event outside.\n      this.listenTouchFunc = this.renderer.listen('document', 'touchstart', (event: any) => this.onDocumentMouseDown(event));\n\n      this.show();\n      this.cdr.detectChanges();\n  }\n\n  public ngOnDestroy(): void {\n      if (this.closeOnClickOutside && this.listenClickFunc) {\n          this.listenClickFunc();\n      }\n      if (this.closeOnMouseOutside && this.listenMouseFunc) {\n          this.listenMouseFunc();\n      }\n      if (!!this.listenTouchFunc) {\n          this.listenTouchFunc();\n      }\n  }\n\n  // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n\n  public updatePosition(): void {\n      // if visible, reposition\n      if (this.opacity) {\n          const p = this.positionElements(this.popover.getElement(), this.popoverDiv.nativeElement, this.placement);\n          this.top = p.top;\n          this.left = p.left;\n      }\n  }\n\n  public show(): void {\n      if (!this.popover || !this.popover.getElement()) {\n          return;\n      }\n\n      const p = this.positionElements(this.popover.getElement(), this.popoverDiv.nativeElement, this.placement);\n      this.displayType = 'block';\n      this.top = p.top;\n      this.left = p.left;\n      this.isIn = true;\n      this.transitionEnabled = true;\n      this.opacity = 1;\n  }\n\n  public hide(): void {\n      this.top = -10000;\n      this.left = -10000;\n      this.isIn = true;\n      this.popover.hide();\n  }\n\n  public hideFromPopover(): void {\n      this.top = -10000;\n      this.left = -10000;\n      this.isIn = true;\n      this.transitionEnabled = false;\n      this.opacity = 0;\n  }\n\n  // -------------------------------------------------------------------------\n  // Protected Methods\n  // -------------------------------------------------------------------------\n\n  protected positionElements(hostEl: HTMLElement, targetEl: HTMLElement, positionStr: PopoverPlacement, appendToBody: boolean = false): { top: number, left: number } {\n      const positionStrParts = (positionStr as string).split(' ');\n      let pos0 = positionStrParts[0];\n      const pos1 = positionStrParts[1] || 'center';\n      const hostElPos = appendToBody ? this.offset(hostEl) : this.position(hostEl);\n      const targetElWidth = targetEl.offsetWidth;\n      const targetElHeight = targetEl.offsetHeight;\n\n      this.effectivePlacement = pos0 = this.getEffectivePlacement(pos0, hostEl, targetEl);\n\n      const shiftWidth: any = {\n          center: function (): number {\n              return hostElPos.left + hostElPos.width / 2 - targetElWidth / 2;\n          },\n          left: function (): number {\n              return hostElPos.left;\n          },\n          right: function (): number {\n              return hostElPos.left + hostElPos.width;\n          },\n          topOrBottomRight: function (): number {\n              return hostElPos.left + hostElPos.width / 2;\n          },\n          topOrBottomLeft: function (): number {\n              return hostElPos.left - targetElWidth  + hostElPos.width / 2;\n          }\n      };\n\n      const shiftHeight: any = {\n          center: function (): number {\n              return hostElPos.top + hostElPos.height / 2 - targetElHeight / 2;\n          },\n          top: function (): number {\n              return hostElPos.top;\n          },\n          bottom: function (): number {\n              return hostElPos.top + hostElPos.height;\n          }\n      };\n\n      let targetElPos: { top: number, left: number };\n      switch (pos0) {\n          case PopoverPlacement.Right:\n              targetElPos = {\n                  top: shiftHeight[pos1](),\n                  left: shiftWidth[pos0]()\n              };\n              break;\n\n          case PopoverPlacement.Left:\n              targetElPos = {\n                  top: shiftHeight[pos1](),\n                  left: hostElPos.left - targetElWidth\n              };\n              break;\n\n          case PopoverPlacement.Bottom:\n              targetElPos = {\n                  top: shiftHeight[pos0](),\n                  left: shiftWidth[pos1]()\n              };\n              break;\n          case PopoverPlacement.TopLeft:\n              targetElPos = {\n                  top: hostElPos.top - targetElHeight,\n                  left: shiftWidth['topOrBottomLeft']()\n              };\n              break;\n          case PopoverPlacement.TopRight:\n              targetElPos = {\n                  top: hostElPos.top - targetElHeight,\n                  left: shiftWidth['topOrBottomRight']()\n              };\n              break;\n          case PopoverPlacement.BottomLeft:\n              targetElPos = {\n                  top: shiftHeight[PopoverPlacement.Bottom](),\n                  left: shiftWidth['topOrBottomLeft']()\n              };\n              break;\n          case PopoverPlacement.BottomRight:\n              targetElPos = {\n                  top: shiftHeight[PopoverPlacement.Bottom](),\n                  left: shiftWidth['topOrBottomRight']()\n              };\n              break;\n\n          default:\n              targetElPos = {\n                  top: hostElPos.top - targetElHeight,\n                  left: shiftWidth[pos1]()\n              };\n              break;\n      }\n\n      return targetElPos;\n  }\n\n  protected position(nativeEl: HTMLElement): { width: number, height: number, top: number, left: number } {\n      let offsetParentBCR = { top: 0, left: 0 };\n      const elBCR = this.offset(nativeEl);\n      const offsetParentEl = this.parentOffsetEl(nativeEl);\n      if (offsetParentEl !== window.document) {\n          offsetParentBCR = this.offset(offsetParentEl);\n          offsetParentBCR.top += offsetParentEl.clientTop - offsetParentEl.scrollTop;\n          offsetParentBCR.left += offsetParentEl.clientLeft - offsetParentEl.scrollLeft;\n      }\n\n      const boundingClientRect = nativeEl.getBoundingClientRect();\n      return {\n          width: boundingClientRect.width || nativeEl.offsetWidth,\n          height: boundingClientRect.height || nativeEl.offsetHeight,\n          top: elBCR.top - offsetParentBCR.top,\n          left: elBCR.left - offsetParentBCR.left\n      };\n  }\n\n  protected offset(nativeEl: any): { width: number, height: number, top: number, left: number } {\n      const boundingClientRect = nativeEl.getBoundingClientRect();\n      return {\n          width: boundingClientRect.width || nativeEl.offsetWidth,\n          height: boundingClientRect.height || nativeEl.offsetHeight,\n          top: boundingClientRect.top + (window.pageYOffset || window.document.documentElement.scrollTop),\n          left: boundingClientRect.left + (window.pageXOffset || window.document.documentElement.scrollLeft)\n      };\n  }\n\n  protected getStyle(nativeEl: HTMLElement, cssProp: string): string {\n      if ((nativeEl as any).currentStyle) { // IE\n          return (nativeEl as any).currentStyle[cssProp];\n      }\n\n      if (window.getComputedStyle) {\n          return (window.getComputedStyle as any)(nativeEl)[cssProp];\n      }\n\n      // finally try and get inline style\n      return (nativeEl.style as any)[cssProp];\n  }\n\n  protected isStaticPositioned(nativeEl: HTMLElement): boolean {\n      return (this.getStyle(nativeEl, 'position') || 'static' ) === 'static';\n  }\n\n  protected parentOffsetEl(nativeEl: HTMLElement): any {\n      let offsetParent: any = nativeEl.offsetParent || window.document;\n      while (offsetParent && offsetParent !== window.document && this.isStaticPositioned(offsetParent)) {\n          offsetParent = offsetParent.offsetParent;\n      }\n      return offsetParent || window.document;\n  }\n\n  // Check for overflow of the viewport and reflect the position if necessary.\n  protected getEffectivePlacement(placement: string, hostElement: HTMLElement, targetElement: HTMLElement): string {\n      const hostElBoundingRect = hostElement.getBoundingClientRect();\n\n      const desiredPlacement = placement || PopoverPlacement.Top;\n\n      // Reflect appropriately if overflow.\n      if (desiredPlacement === PopoverPlacement.Top) {\n          const isTopOverflow = hostElBoundingRect.top - targetElement.offsetHeight < 0;\n          const isRightOverflow = hostElBoundingRect.left + hostElBoundingRect.width / 2 + targetElement.offsetWidth / 2 > this.windowWidth;\n          const isLeftOverflow = hostElBoundingRect.left + hostElBoundingRect.width / 2 - targetElement.offsetWidth / 2 < 0;\n\n          if (isTopOverflow) {\n              return PopoverPlacement.Bottom;\n          } else if (isRightOverflow) {\n              return PopoverPlacement.TopLeft;\n          } else if (isLeftOverflow) {\n              return PopoverPlacement.TopRight;\n          }\n      }\n      if (desiredPlacement === PopoverPlacement.Bottom) {\n          const isRightOverflow = hostElBoundingRect.left + hostElBoundingRect.width / 2 + targetElement.offsetWidth / 2 > this.windowWidth;\n          const isLeftOverflow = hostElBoundingRect.left + hostElBoundingRect.width / 2 - targetElement.offsetWidth / 2 < 0;\n          const isBottomOverflow = hostElBoundingRect.bottom + targetElement.offsetHeight > this.windowHeight;\n\n          if (isBottomOverflow) {\n              return PopoverPlacement.Top;\n          } else if (isRightOverflow) {\n              return PopoverPlacement.BottomLeft;\n          } else if (isLeftOverflow) {\n              return PopoverPlacement.BottomRight;\n          }\n      }\n      if (desiredPlacement === PopoverPlacement.Left) {\n          const isTopOverflow = hostElBoundingRect.top + hostElBoundingRect.height / 2 - targetElement.offsetHeight / 2 < 0;\n          const isLeftOverflow = hostElBoundingRect.left - targetElement.offsetWidth < 0;\n          const isBottomOverflow = hostElBoundingRect.top + hostElBoundingRect.height / 2 + targetElement.offsetHeight / 2 > this.windowHeight;\n\n          if (isLeftOverflow) {\n              return PopoverPlacement.Right;\n          } else if (isTopOverflow) {\n              return PopoverPlacement.BottomLeft;\n          } else if (isBottomOverflow) {\n              return PopoverPlacement.TopLeft;\n          }\n      }\n      if (desiredPlacement === PopoverPlacement.Right) {\n          const isTopOverflow = hostElBoundingRect.top + hostElBoundingRect.height / 2 - targetElement.offsetHeight / 2 < 0;\n          const isRightOverflow = hostElBoundingRect.right + targetElement.offsetWidth > this.windowWidth;\n          const isBottomOverflow = hostElBoundingRect.top + hostElBoundingRect.height / 2 + targetElement.offsetHeight / 2 > this.windowHeight;\n\n          if (isRightOverflow) {\n              return PopoverPlacement.Left;\n          } else if (isTopOverflow) {\n              return PopoverPlacement.BottomRight;\n          } else if (isBottomOverflow) {\n              return PopoverPlacement.TopRight;\n          }\n      }\n      if (desiredPlacement === PopoverPlacement.TopRight) {\n          const isTopOverflow = hostElBoundingRect.top - targetElement.offsetHeight < 0;\n          const isRightOverflow = hostElBoundingRect.right + targetElement.offsetWidth > this.windowWidth;\n\n          if (isTopOverflow && isRightOverflow) {\n              return PopoverPlacement.BottomLeft;\n          } else if (isTopOverflow) {\n              return PopoverPlacement.BottomRight;\n          } else if (isRightOverflow) {\n              return PopoverPlacement.TopLeft;\n          }\n      }\n      if (desiredPlacement === PopoverPlacement.TopLeft) {\n          const isTopOverflow = hostElBoundingRect.top - targetElement.offsetHeight < 0;\n          const isLeftOverflow = hostElBoundingRect.left - targetElement.offsetWidth < 0;\n\n          if (isTopOverflow && isLeftOverflow) {\n              return PopoverPlacement.BottomRight;\n          } else if (isTopOverflow) {\n              return PopoverPlacement.BottomLeft;\n          } else if (isLeftOverflow) {\n              return PopoverPlacement.TopRight;\n          }\n      }\n      if (desiredPlacement === PopoverPlacement.BottomRight) {\n          const isBottomOverflow = hostElBoundingRect.bottom + targetElement.offsetHeight > this.windowHeight;\n          const isRightOverflow = hostElBoundingRect.right + targetElement.offsetWidth > this.windowWidth;\n\n          if (isBottomOverflow && isRightOverflow) {\n              return PopoverPlacement.TopLeft;\n          } else if (isBottomOverflow) {\n              return PopoverPlacement.TopRight;\n          } else if (isRightOverflow) {\n              return PopoverPlacement.BottomLeft;\n          }\n      }\n      if (desiredPlacement === PopoverPlacement.BottomLeft) {\n          const isBottomOverflow = hostElBoundingRect.bottom + targetElement.offsetHeight > this.windowHeight;\n          const isLeftOverflow = hostElBoundingRect.left - targetElement.offsetWidth < 0;\n\n          if (isBottomOverflow && isLeftOverflow) {\n              return PopoverPlacement.TopRight;\n          } else if (isBottomOverflow) {\n              return PopoverPlacement.TopLeft;\n          } else if (isLeftOverflow) {\n              return PopoverPlacement.BottomRight;\n          }\n      }\n\n      return desiredPlacement;\n  }\n}\n","/**\n * This is a continuation of ngx-popover\n * @Reference {github} https://github.com/pleerock/ngx-popover\n */\n\nimport {\n    ComponentFactoryResolver,\n    ComponentRef,\n    Directive,\n    EventEmitter,\n    HostListener,\n    Input,\n    OnChanges,\n    Output,\n    SimpleChange,\n    ViewContainerRef\n} from '@angular/core';\nimport { PopoverContentComponent } from './popover-content.component';\n\nexport class PopoverPlacement {\n    public static readonly Bottom = 'bottom';\n    public static readonly BottomLeft = 'bottom-left';\n    public static readonly BottomRight = 'bottom-right';\n    public static readonly Left = 'left';\n    public static readonly Right = 'right';\n    public static readonly Top = 'top';\n    public static readonly TopLeft = 'top-left';\n    public static readonly TopRight = 'top-right';\n}\n\n/**\n* @group Basic Toolkit\n* @component Popover Directive\n*/\n@Directive({\n    selector: '[popover]',\n    exportAs: 'popover'\n})\nexport class PopoverDirective implements OnChanges {\n    // -------------------------------------------------------------------------\n    // Properties\n    // -------------------------------------------------------------------------\n    protected popoverContentComponent = PopoverContentComponent;\n    protected popover: ComponentRef<PopoverContentComponent>;\n    protected visible: boolean;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    constructor(protected viewContainerRef: ViewContainerRef,\n        protected resolver: ComponentFactoryResolver) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Inputs / Outputs\n    // -------------------------------------------------------------------------\n    @Input('popover') public content: string | PopoverContentComponent;\n    @Input() public popoverSize: 'small' | 'medium-small' | 'medium' | 'large' | 'auto';\n    @Input() public popoverDisabled: boolean;\n    @Input() public popoverAnimation: boolean;\n    @Input() public popoverPlacement: PopoverPlacement;\n    @Input() public popoverTitle: string;\n    @Input() public popoverOnHover = true;\n    @Input() public popoverCloseOnClickOutside: boolean;\n    @Input() public popoverCloseOnMouseOutside: boolean;\n    @Input() public popoverDismissTimeout = 0;\n    @Output() public onShown = new EventEmitter<PopoverDirective>();\n    @Output() public onHidden = new EventEmitter<PopoverDirective>();\n\n    // -------------------------------------------------------------------------\n    // Event listeners\n    // -------------------------------------------------------------------------\n    @HostListener('click', ['$event'])\n    public showOrHideOnClick(evt: Event): void {\n        if (this.popoverOnHover) {\n            return;\n        }\n        if (this.popoverDisabled) {\n            return;\n        }\n        evt.stopImmediatePropagation();\n        this.toggle();\n    }\n\n    @HostListener('touchend', ['$event'])\n    public showOrHideOnTouch(evt: Event): void {\n        evt.stopImmediatePropagation();\n        if (!this.popoverOnHover) {\n            return;\n        }\n        if (this.popoverDisabled) {\n            return;\n        }\n        this.toggle();\n    }\n\n    @HostListener('focusin')\n    @HostListener('mouseenter')\n    public showOnHover(): void {\n        if (!this.popoverOnHover) {\n            return;\n        }\n        if (this.popoverDisabled) {\n            return;\n        }\n        this.show();\n    }\n\n    @HostListener('focusout')\n    @HostListener('mouseleave')\n    public hideOnHover(): void {\n        if (this.popoverCloseOnMouseOutside) {\n            return; // don't do anything since we do not control this\n        }\n        if (!this.popoverOnHover) {\n            return;\n        }\n        if (this.popoverDisabled) {\n            return;\n        }\n        this.hide();\n    }\n\n    public ngOnChanges(changes: { [propertyName: string]: SimpleChange }): void {\n        if (changes['popoverDisabled']) {\n            if (changes['popoverDisabled'].currentValue) {\n                this.hide();\n            }\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    public toggle(): void {\n        if (!this.visible) {\n            this.show();\n        } else {\n            this.hide();\n        }\n    }\n\n    public show(): void {\n        if (this.visible) {\n            return;\n        }\n\n        this.visible = true;\n        if (typeof this.content === 'string') {\n            const factory = this.resolver.resolveComponentFactory(this.popoverContentComponent);\n            if (!this.visible) {\n                return;\n            }\n\n            this.popover = this.viewContainerRef.createComponent(factory);\n            const popover = this.popover.instance as PopoverContentComponent;\n            popover.popover = this;\n            popover.content = this.content as string;\n            if (this.popoverPlacement !== undefined) {\n                popover.placement = this.popoverPlacement;\n            }\n            if (this.popoverAnimation !== undefined) {\n                popover.animation = this.popoverAnimation;\n            }\n            if (this.popoverTitle !== undefined) {\n                popover.title = this.popoverTitle;\n            }\n            if (this.popoverCloseOnClickOutside !== undefined) {\n                popover.closeOnClickOutside = this.popoverCloseOnClickOutside;\n            }\n            if (this.popoverCloseOnMouseOutside !== undefined) {\n                popover.closeOnMouseOutside = this.popoverCloseOnMouseOutside;\n            }\n            if (this.popoverSize) {\n                popover.size = this.popoverSize;\n            }\n\n            popover.onCloseFromOutside.subscribe(() => this.hide());\n            // if dismissTimeout option is set, then this popover will be dismissed in dismissTimeout time\n            if (this.popoverDismissTimeout > 0) {\n                setTimeout(() => this.hide(), this.popoverDismissTimeout);\n            }\n        } else {\n            const popover = this.content as PopoverContentComponent;\n            popover.popover = this;\n            if (this.popoverPlacement !== undefined) {\n                popover.placement = this.popoverPlacement;\n            }\n            if (this.popoverAnimation !== undefined) {\n                popover.animation = this.popoverAnimation;\n            }\n            if (this.popoverTitle !== undefined) {\n                popover.title = this.popoverTitle;\n            }\n            if (this.popoverCloseOnClickOutside !== undefined) {\n                popover.closeOnClickOutside = this.popoverCloseOnClickOutside;\n            }\n            if (this.popoverCloseOnMouseOutside !== undefined) {\n                popover.closeOnMouseOutside = this.popoverCloseOnMouseOutside;\n            }\n            if (this.popoverSize) {\n                popover.size = this.popoverSize;\n            }\n\n            popover.onCloseFromOutside.subscribe(() => this.hide());\n            // if dismissTimeout option is set, then this popover will be dismissed in dismissTimeout time\n            if (this.popoverDismissTimeout > 0) {\n                setTimeout(() => this.hide(), this.popoverDismissTimeout);\n            }\n            popover.show();\n        }\n\n        this.onShown.emit(this);\n    }\n\n    public hide(): void {\n        if (!this.visible) {\n            return;\n        }\n\n        this.visible = false;\n        if (this.popover) {\n            this.popover.destroy();\n        }\n\n        if (this.content instanceof PopoverContentComponent) {\n            (this.content as PopoverContentComponent).hideFromPopover();\n        }\n\n        this.onHidden.emit(this);\n    }\n\n    public getElement(): HTMLElement {\n        return this.viewContainerRef.element.nativeElement;\n    }\n}\n","import { PopoverDirective } from './popover.directive';\nimport { PopoverContentComponent } from './popover-content.component';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n    declarations: [\n        PopoverDirective,\n        PopoverContentComponent\n    ],\n    imports: [\n        CommonModule,\n    ],\n    exports: [\n        PopoverContentComponent,\n        PopoverDirective\n    ],\n    entryComponents: [\n        PopoverContentComponent\n    ]\n})\nexport class PopoverModule { }\n"]}