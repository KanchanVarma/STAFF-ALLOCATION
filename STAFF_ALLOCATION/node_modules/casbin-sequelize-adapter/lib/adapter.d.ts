import { Adapter, Model } from 'casbin';
/**
 * SequelizeAdapter represents the Sequelize adapter for policy storage.
 */
export declare class SequelizeAdapter implements Adapter {
    private connStr;
    private dbSpecified;
    private sequelize;
    private static modelMap;
    constructor(connStr: string, dbSpecified: boolean);
    /**
     * newAdapter is the constructor.
     * dbSpecified is an optional boolean parameter. The default value is false.
     * It's up to whether you have specified an existing DB in connStr.
     * If dbSpecified == true, you need to make sure the DB in connStr exists.
     * If dbSpecified == false, the adapter will automatically create a DB named 'casbin'.
     */
    static newAdapter(connStr: string, dbSpecified?: boolean): Promise<SequelizeAdapter>;
    private createDatabase;
    private open;
    close(): Promise<void>;
    private getCasbinRuleModel;
    private createTable;
    private dropTable;
    private loadPolicyLine;
    /**
     * loadPolicy loads all policy rules from the storage.
     */
    loadPolicy(model: Model): Promise<void>;
    private savePolicyLine;
    /**
     * savePolicy saves all policy rules to the storage.
     */
    savePolicy(model: Model): Promise<boolean>;
    /**
     * addPolicy adds a policy rule to the storage.
     */
    addPolicy(sec: string, ptype: string, rule: string[]): Promise<void>;
    /**
     * removePolicy removes a policy rule from the storage.
     */
    removePolicy(sec: string, ptype: string, rule: string[]): Promise<void>;
    /**
     * removeFilteredPolicy removes policy rules that match the filter from the storage.
     */
    removeFilteredPolicy(sec: string, ptype: string, fieldIndex: number, ...fieldValues: string[]): Promise<void>;
}
